{
    "Description": "Stack with Lambda function performing maintenance tasks",
    "Parameters": {
        "AlarmEmail": {
            "Default": "cnidevteam@condenastint.com",
            "Description": "Email where Lambda errors alarms should be sent to",
            "Type": "String"
        }
    },
    "Resources": {
        "LambdaBackupRDSErrorsAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaBackupRDSFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaBackupRDSFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": "import boto3\nimport operator\n\n\ndef copy_latest_snapshot():\n    client = boto3.client('rds', 'eu-west-1')\n    frankfurt_client = boto3.client('rds', 'eu-central-1')\n\n    response = client.describe_db_snapshots(\n        SnapshotType='automated',\n        IncludeShared=False,\n        IncludePublic=False\n    )\n\n    if len(response['DBSnapshots']) == 0:\n        raise Exception(\"No automated snapshots found\")\n\n    snapshots_per_project = {}\n    for snapshot in response['DBSnapshots']:\n        if snapshot['Status'] != 'available':\n            continue\n\n        if snapshot['DBInstanceIdentifier'] not in snapshots_per_project.keys():\n            snapshots_per_project[snapshot['DBInstanceIdentifier']] = {}\n\n        snapshots_per_project[snapshot['DBInstanceIdentifier']][snapshot['DBSnapshotIdentifier']] = snapshot[\n            'SnapshotCreateTime']\n\n    for project in snapshots_per_project:\n        sorted_list = sorted(snapshots_per_project[project].items(), key=operator.itemgetter(1), reverse=True)\n\n        copy_name = project + \"-\" + sorted_list[0][1].strftime(\"%Y-%m-%d\")\n\n        print(\"Checking if \" + copy_name + \" is copied\")\n\n        try:\n            frankfurt_client.describe_db_snapshots(\n                DBSnapshotIdentifier=copy_name\n            )\n        except:\n            response = frankfurt_client.copy_db_snapshot(\n                SourceDBSnapshotIdentifier='arn:aws:rds:eu-west-1:800540593336:snapshot:' + sorted_list[0][0],\n                TargetDBSnapshotIdentifier=copy_name,\n                CopyTags=True\n            )\n\n            if response['DBSnapshot']['Status'] != \"pending\" and response['DBSnapshot']['Status'] != \"available\":\n                raise Exception(\"Copy operation for \" + copy_name + \" failed!\")\n            print(\"Copied \" + copy_name)\n\n            # frankfurt_client.modify_db_snapshot_attribute(\n            #     DBSnapshotIdentifier=copy_name,\n            #     AttributeName='restore',\n            #     ValuesToAdd=['678957977264']\n            # )\n\n            continue\n\n        print(\"Already copied\")\n\n\ndef remove_old_snapshots():\n    client = boto3.client('rds', 'eu-west-1')\n    frankfurt_client = boto3.client('rds', 'eu-central-1')\n\n    response = frankfurt_client.describe_db_snapshots(\n        SnapshotType='manual'\n    )\n\n    if len(response['DBSnapshots']) == 0:\n        raise Exception(\"No manual snapshots in Frankfurt found\")\n\n    snapshots_per_project = {}\n    for snapshot in response['DBSnapshots']:\n        if snapshot['Status'] != 'available':\n            continue\n\n        if snapshot['DBInstanceIdentifier'] not in snapshots_per_project.keys():\n            snapshots_per_project[snapshot['DBInstanceIdentifier']] = {}\n\n        snapshots_per_project[snapshot['DBInstanceIdentifier']][snapshot['DBSnapshotIdentifier']] = snapshot[\n            'SnapshotCreateTime']\n\n    for project in snapshots_per_project:\n        if len(snapshots_per_project[project]) > 1:\n            sorted_list = sorted(snapshots_per_project[project].items(), key=operator.itemgetter(1), reverse=False)\n            to_remove = [i[0] for i in sorted_list[1:]]\n\n            for snapshot in to_remove:\n                print(\"Removing \" + snapshot)\n                frankfurt_client.delete_db_snapshot(\n                    DBSnapshotIdentifier=snapshot\n                )\n\n\ndef lambda_handler(event, context):\n    copy_latest_snapshot()\n    remove_old_snapshots()\n\n\nif __name__ == '__main__':\n    lambda_handler(None, None)\n"
                },
                "Description": "Copies RDS backups to Frankfurt (live only)",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaBackupRDSRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 10
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaBackupRDSRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "rds:DescribeDbSnapshots",
                                        "rds:CopyDbSnapshot",
                                        "rds:DeleteDbSnapshot"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "LambdaCleanBaseImagesPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "LambdaBackupRDSThrottlesAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaBackupRDSFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Throttles",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaBaseErrorsAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaBaseFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaBaseFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": "import boto3\nimport operator\n\n\ndef lambda_handler(event, context):\n    LIMIT = 10\n    client = boto3.client('ec2', 'eu-west-1')\n\n    response = client.describe_images(\n        Owners=['self'],\n        Filters=[{'Name': 'tag:Type', 'Values': ['BaseImage']}]\n    )\n\n    if len(response['Images']) == 0:\n        raise Exception('no AMIs with Type=BaseImage tag found')\n\n    images = {}\n    for image in response['Images']:\n        for tag in image['Tags']:\n            if tag['Key'] == \"Project\":\n                if tag['Value'] not in images.keys():\n                    images[tag['Value']] = {}\n                images[tag['Value']][image['ImageId']] = image['CreationDate']\n                break\n\n    to_remove = []\n    for project in images:\n        sorted_x = sorted(images[project].items(), key=operator.itemgetter(1), reverse=True)\n        if len(sorted_x) > LIMIT:\n            to_remove = to_remove + [i[0] for i in sorted_x[LIMIT:]]\n\n    if len(to_remove) == 0:\n        print(\"Nothing to do\")\n        return 0\n\n    print(\"Will remove \" + str(len(to_remove)) + \" images\")\n\n    for ami in to_remove:\n        print(\"Removing: \" + ami)\n        client.deregister_image(ImageId=ami)\n\n\nif __name__ == '__main__':\n    lambda_handler(None, None)\n"
                },
                "Description": "Clears Base AMI images",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaCleanImagesRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 10
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaCleanImagesRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:DescribeImages",
                                        "ec2:DeregisterImage"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "LambdaCleanBaseImagesPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "LambdaErrorTopic": {
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "AlarmEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            },
            "Type": "AWS::SNS::Topic"
        },
        "LambdaReleaseErrorsAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaReleaseFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaReleaseFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": "from __future__ import print_function\nimport boto3\nimport operator\n\n\ndef clean_images(region, limit):\n    client = boto3.client('ec2', region)\n\n    response = client.describe_images(\n        Owners=['self'],\n        Filters=[{'Name': 'tag:Type', 'Values': ['ReleaseImage']}]\n    )\n\n    if len(response['Images']) == 0:\n        raise Exception('no AMIs with Type=BaseImage tag found')\n\n    images = {}\n    for image in response['Images']:\n        for tag in image['Tags']:\n            if tag['Key'] == \"Project\":\n                if tag['Value'] not in images.keys():\n                    images[tag['Value']] = {}\n                images[tag['Value']][image['ImageId']] = image['CreationDate']\n                break\n\n    to_remove = [];\n    for project in images:\n        sorted_x = sorted(images[project].items(), key=operator.itemgetter(1), reverse=True)\n        if len(sorted_x) > limit:\n            to_remove = to_remove + [i[0] for i in sorted_x[limit:]]\n\n    if len(to_remove) == 0:\n        print(\"Nothing to do\")\n        return 0\n\n    print(\"Will remove \" + str(len(to_remove)) + \" images\")\n\n    for ami in to_remove:\n        print(\"Removing: \" + ami)\n        client.deregister_image(ImageId=ami)\n\n\ndef lambda_handler(event, context):\n    clean_images('eu-west-1', 50)\n    clean_images('eu-central-1', 1)\n\n\nif __name__ == '__main__':\n    lambda_handler(None, None)\n"
                },
                "Description": "Clears Release AMI images",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaCleanImagesRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 10
            },
            "Type": "AWS::Lambda::Function"
        }
    }
}
